{"version":3,"sources":["pages/nav-bar/nav-bar.js","pages/nav-bar/index.js","pages/home/home.js","pages/home/index.js","pages/footer/footer.js","pages/footer/index.js","pages/layout/layout.js","pages/layout/index.js","other/serviceWorker.js","index.js"],"names":["links","ResponsiveMenu","useState","drowpdownOpen","setDropdownOpen","toggleDropdown","useCallback","className","onClick","window","location","pathname","Object","keys","filter","to","map","Link","children","exact","activeClassName","NavBar","responsive","setResponsive","checkResponsiveness","innerWidth","useEffect","addEventListener","removeEventListener","Home","Footer","Layout","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSAGMA,EAAQ,CACZ,IAAK,OACL,YAAa,WACb,WAAY,WAuCd,SAASC,IAAkB,IAAD,EACiBC,oBAAS,GAD1B,mBACjBC,EADiB,KACFC,EADE,KAElBC,EAAiBC,uBAAY,WACjCF,GAAiBD,KACjB,CAACA,IAEH,OAAQ,yBAAKI,UAAU,qBACrB,yBAAKC,QAASH,EAAgBE,UAAU,6BACtC,0BAAMA,UAAU,qDAAqDP,EAAMS,OAAOC,SAASC,WAC3F,0BAAMJ,UAAS,iCAA4BJ,EAAgB,iCAAmC,OAEhG,yBAAKI,UAAS,oCAA+BJ,EAAgB,oCAAsC,KAChGS,OAAOC,KAAKb,GAAOc,QAAO,SAACC,GAAD,OAAQA,IAAON,OAAOC,SAASC,YAAUK,KAAI,SAACD,GAAD,OAAQ,kBAACE,EAAD,CAAMT,QAASH,EACTU,GAAIA,GAAKf,EAAMe,SAK3G,SAASE,EAAT,GAAwC,IAAzBF,EAAwB,EAAxBA,GAAIG,EAAoB,EAApBA,SAAUV,EAAU,EAAVA,QAC3B,OACE,kBAAC,IAAD,CAASA,QAASA,EAASO,GAAIA,EAAII,OAAK,EAACZ,UAAU,uBAC1Ca,gBAAgB,gCACtBF,GAKQG,MA/Df,WAAmB,IAAD,EACoBnB,oBAAS,GAD7B,mBACToB,EADS,KACGC,EADH,KAEVC,EAAsBlB,uBAAY,YACjCgB,GAAcb,OAAOgB,WAAa,IACrCF,GAAc,GACLD,GAAcb,OAAOgB,WAAa,KAC3CF,GAAc,KAEf,CAACD,IAUJ,OATAI,qBAAU,WAGR,OAFAF,IACAf,OAAOkB,iBAAiB,SAAUH,GAC3B,WACLf,OAAOmB,oBAAoB,SAAUJ,MAEtC,CAACA,IAIF,yBAAKjB,UAAU,WACb,yBAAKA,UAAU,iBAAiBC,QAAS,kBAAMe,GAAc,KAC3D,kBAAC,IAAD,CAASR,GAAG,IAAIR,UAAU,wBAA1B,mBADF,IAKGe,GAAc,kBAACrB,EAAD,QAEfqB,GACF,yBAAKf,UAAU,kBACZK,OAAOC,KAAKb,GAAOgB,KAAI,SAACD,GAAD,OAAQ,kBAACE,EAAD,CAAMF,GAAIA,GAAKf,EAAMe,UCpC9CM,G,MAAAA,G,OCYAQ,MAZf,WACE,OAAQ,yBAAKtB,UAAU,QACrB,8XCDWsB,G,MAAAA,GCMAC,MAPf,WACE,OACE,4BAAQvB,UAAU,UAAlB,uBCDWuB,G,MAAAA,GCsBAC,ICvBAA,EDKf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,yBAAKxB,UAAU,WACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOY,OAAK,EAACa,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cACZ,kBAAC,IAAD,CAAOA,KAAK,eAGhB,kBAAC,EAAD,QERcC,QACW,cAA7BxB,OAAOC,SAASwB,UAEe,UAA7BzB,OAAOC,SAASwB,UAEhBzB,OAAOC,SAASwB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4fff1fe5.chunk.js","sourcesContent":["import React, {useCallback, useEffect, useState} from 'react';\nimport {NavLink} from 'react-router-dom';\n\nconst links = {\n  \"/\": \"home\",\n  \"/projects\": \"projects\",\n  \"/contact\": \"contact\"\n};\n\nfunction NavBar() {\n  const [responsive, setResponsive] = useState(false);\n  const checkResponsiveness = useCallback(() => {\n    if (!responsive && window.innerWidth < 750) {\n      setResponsive(true);\n    } else if (responsive && window.innerWidth > 750) {\n      setResponsive(false);\n    }\n  }, [responsive]);\n  useEffect(() => {\n    checkResponsiveness();\n    window.addEventListener(\"resize\", checkResponsiveness);\n    return () => {\n      window.removeEventListener(\"resize\", checkResponsiveness);\n    }\n  }, [checkResponsiveness]);\n\n\n  return (\n    <div className=\"nav-bar\">\n      <div className=\"nav-bar__title\" onClick={() => setResponsive(true)}>\n        <NavLink to=\"/\" className=\"nav-bar__title__text\">\n          codar@sam-clark\n        </NavLink>\n        :\n        {responsive && <ResponsiveMenu/>}\n      </div>\n      {!responsive &&\n      <div className=\"nav-bar__links\">\n        {Object.keys(links).map((to) => <Link to={to}>{links[to]}</Link>)}\n      </div>\n      }\n    </div>\n  );\n}\n\nfunction ResponsiveMenu() {\n  const [drowpdownOpen, setDropdownOpen] = useState(false);\n  const toggleDropdown = useCallback(() => {\n    setDropdownOpen(!drowpdownOpen);\n  },[drowpdownOpen]);\n\n  return (<div className=\"nav-bar__dropdown\">\n    <div onClick={toggleDropdown} className=\"nav-bar__dropdown__button\">\n      <span className=\"nav-bar__links__link--active nav-bar__links__link\">{links[window.location.pathname]}</span>\n      <span className={`nav-bar__dropdown__icon${drowpdownOpen ? \" nav-bar__dropdown__icon--open\" : \"\"}`}/>\n    </div>\n    <div className={`nav-bar__dropdown__content${drowpdownOpen ? \" nav-bar__dropdown__content--open\" : \"\"}`}>\n      {Object.keys(links).filter((to) => to !== window.location.pathname).map((to) => <Link onClick={toggleDropdown}\n                                                                                            to={to}>{links[to]}</Link>)}\n    </div>\n  </div>);\n}\n\nfunction Link({to, children, onClick}) {\n  return (\n    <NavLink onClick={onClick} to={to} exact className=\"nav-bar__links__link\"\n             activeClassName=\"nav-bar__links__link--active\">\n      {children}\n    </NavLink>\n  )\n}\n\nexport default NavBar;\n","import NavBar from './nav-bar';\nimport './nav-bar.scss';\nexport default NavBar;\n","import React from 'react';\n\nfunction Home() {\n  return (<div className=\"home\">\n    <p>\n      I guess this is supposed to be a paragraph about me and what I do.\n      Well I am Sam and I code stuff for fun, usually that stuff isn't very useful but fun.\n      In some cases I work on open source projects to feel like I am actually doing something useful.\n      I have some useful projects that you can check out.\n      Most of my code is open source and MIT licenced.\n    </p>\n  </div>);\n}\n\nexport default Home;\n","import Home from './home';\nimport './home.scss';\n\nexport default Home;\n","import React from 'react';\n\nfunction Footer() {\n  return (\n    <footer className='footer'>\n     made by codar (me)\n    </footer>)\n}\n\nexport default Footer;\n","import Footer from './footer';\nimport './footer.scss';\n\nexport default Footer;\n","import React from 'react';\nimport './layout.scss';\nimport NavBar from '../nav-bar';\nimport {Switch, Route} from 'react-router-dom';\nimport Home from '../home';\nimport Footer from '../footer';\n\nfunction Layout() {\n  return (\n    <>\n      <NavBar/>\n      <div className=\"content\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home/>\n          </Route>\n          <Route path=\"/projects\"/>\n          <Route path=\"/contact\"/>\n        </Switch>\n      </div>\n      <Footer/>\n    </>\n  );\n}\n\nexport default Layout;\n","import Layout from './layout';\nimport './layout.scss';\nexport default Layout;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Layout from './pages/layout';\nimport * as serviceWorker from './other/serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Layout/>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}