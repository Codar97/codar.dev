{"version":3,"sources":["pages/nav-bar/nav-bar.js","pages/nav-bar/index.js","pages/home/home.js","pages/home/index.js","pages/footer/footer.js","pages/footer/index.js","pages/layout/layout.js","pages/layout/index.js","other/serviceWorker.js","index.js"],"names":["Link","to","children","exact","className","activeClassName","NavBar","Home","Footer","Layout","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gSAqBA,SAASA,EAAT,GAA+B,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,SACjB,OACE,kBAAC,IAAD,CAASD,GAAIA,EAAIE,OAAK,EAACC,UAAU,uBAAuBC,gBAAgB,gCACrEH,GAKQI,MA1Bf,WACE,OACE,yBAAKF,UAAU,WACb,yBAAKA,UAAU,kBACb,kBAAC,IAAD,CAASH,GAAG,IAAIG,UAAU,wBAA1B,mBADF,KAMA,yBAAKA,UAAU,kBACb,kBAACJ,EAAD,CAAMC,GAAG,KAAT,QACA,kBAACD,EAAD,CAAMC,GAAG,aAAT,YACA,kBAACD,EAAD,CAAMC,GAAG,YAAT,cCbOK,G,MAAAA,G,OCYAC,MAZf,WACE,OAAQ,yBAAKH,UAAU,QACrB,8XCDWG,G,MAAAA,GCMAC,MAPf,WACE,OACE,4BAAQJ,UAAU,UAAlB,uBCDWI,G,MAAAA,GCsBAC,ICvBAA,EDKf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,yBAAKL,UAAU,WACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOD,OAAK,EAACO,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cACZ,kBAAC,IAAD,CAAOA,KAAK,eAGhB,kBAAC,EAAD,QERcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.71d5251d.chunk.js","sourcesContent":["import React from 'react';\nimport {NavLink} from 'react-router-dom';\n\nfunction NavBar() {\n  return (\n    <div className=\"nav-bar\">\n      <div className=\"nav-bar__title\">\n        <NavLink to=\"/\" className=\"nav-bar__title__text\">\n          codar@sam-clark\n        </NavLink>\n        :\n      </div>\n      <div className=\"nav-bar__links\">\n        <Link to=\"/\">home</Link>\n        <Link to=\"/projects\">projects</Link>\n        <Link to=\"/contact\">contact</Link>\n      </div>\n    </div>\n  );\n}\n\nfunction Link({to, children}) {\n  return (\n    <NavLink to={to} exact className=\"nav-bar__links__link\" activeClassName=\"nav-bar__links__link--active\">\n      {children}\n    </NavLink>\n  )\n}\n\nexport default NavBar;\n","import NavBar from './nav-bar';\nimport './nav-bar.scss';\nexport default NavBar;\n","import React from 'react';\n\nfunction Home() {\n  return (<div className=\"home\">\n    <p>\n      I guess this is supposed to be a paragraph about me and what I do.\n      Well I am Sam and I code stuff for fun, usually that stuff isn't very useful but fun.\n      In some cases I work on open source projects to feel like I am actually doing something useful.\n      I have some useful projects that you can check out.\n      Most of my code is open source and MIT licenced.\n    </p>\n  </div>);\n}\n\nexport default Home;\n","import Home from './home';\nimport './home.scss';\n\nexport default Home;\n","import React from 'react';\n\nfunction Footer() {\n  return (\n    <footer className='footer'>\n     made by codar (me)\n    </footer>)\n}\n\nexport default Footer;\n","import Footer from './footer';\nimport './footer.scss';\n\nexport default Footer;\n","import React from 'react';\nimport './layout.scss';\nimport NavBar from '../nav-bar';\nimport {Switch, Route} from 'react-router-dom';\nimport Home from '../home';\nimport Footer from '../footer';\n\nfunction Layout() {\n  return (\n    <>\n      <NavBar/>\n      <div className=\"content\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home/>\n          </Route>\n          <Route path=\"/projects\"/>\n          <Route path=\"/contact\"/>\n        </Switch>\n      </div>\n      <Footer/>\n    </>\n  );\n}\n\nexport default Layout;\n","import Layout from './layout';\nimport './layout.scss';\nexport default Layout;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Layout from './pages/layout';\nimport * as serviceWorker from './other/serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Layout/>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}